bad_string_idx:<bad string index>
bad_symbol_number:<bad symbol number>
bad_relocation:*** bad relocation
err_file_notopen:File %s doesn't exist?
err_out_of_memory:Not enough memory to process %s (need %lu bytes)
err_failed_to_load:Failed to load %s
err_not_axf:%s is not an AXF file
err_bad_option:unrecognised flag option %s (ignored)
err_b_overrides:-b overrides other options (which have been ignored)
err_missing_files:missing file argument(s)
err_format:*** Format Error: Section expected at AREA offset %d\n
err_nothing_after:the '-%s' option needs a parameter
msg_symb_none:** No symbol table **\n\n
msg_symb:\n\
Low-level Symbol Table\n\
-----------------------\n\n
msg_strings_none:** No string table **\n\n
msg_strings:** String Table (file %s):-\n\n
msg_aif_compressed:Compressed, 
msg_aif_has_relocs:Relocatable, 
msg_aif_aif:\n%s: AIF image: 
msg_aif_nonexec:Non-executable, 
msg_aif_exec:Executable, 
msg_aif_bits:%lu-bit\n
msg_aif_ro:    Read Only Section at:  0x%.8lx, size = %6lu (0x%.6lx)\n
msg_aif_rw:    Read Write Section at: 0x%.8lx, size = %6lu (0x%.6lx)\n
msg_aif_zi:    Zero Init Section at:  0x%.8lx, size = %6lu (0x%.6lx)\n
msg_aif_debug:    Debug size = 0x%.8lx
msg_aif_llinfo:: low-level debugging information
msg_aif_hlinfo:: source-level debugging information
msg_aif_llhlinfo:: low-level and source-level debugging information
msg_aif_llsize:: ll info size 0x%lx
msg_aif_fragment:    Fragment %s: file offset %#lx, size %#lx: load address %#lx\n
msg_aif_relocs:    %ld relocations.\n
msg_aif_one_reloc:    %ld relocation.\n
msg_aif_reloc_leader:      
msg_aif_reloc:0x%08lx
err_aif_dbgsize:%s: inconsistency: dbgtype != 0 but dbgsize == 0
err_aif_fragheader:%s: fragment header outside image file at %#lx
err_aif_fragment:%s: fragment extends beyond image file (end %#lx, file size %#lx)
err_aif_debug:%s: debug info extends beyond image file (end %#lx, file size %#lx)
err_cant_dump_exec_relocs:%s: sorry, don't know how to dump relocations from an execuatable image
err_bad_bin_reloc:%s: relocations are in an unexpected place (at = %#lx; expected = %#lx)
err_aif_reloc_count:%s: relocation count extends beyond image file (end %#lx, file size %#lx)
err_aif_relocs:%s: relocation list extends beyond image file (end %#lx, file size %#lx)
err_elf_isnt_64:%s isn't a 64-bit ELF file
err_elf_isnt_32:%s isn't a 32-bit ELF file
err_elf_out_of_memory:Insufficient memory to process ELF file
msg_file:file %s\n
msg_bigend:Big-endian, 
msg_litend:Little-endian, 
msg_entry:Entry point at offset 0x%.4lx in area \"%s\"\n
msg_sym_external:External reference
msg_sym_external_common:External common reference
msg_sym_local:Local,  
msg_sym_global:Global, 
msg_sym_data:Data, 
msg_sym_thumb:, 16-bit code
msg_sym_fpreg:, FPRegArgs
msg_sym_thumb2:16-bit code, 
msg_sym_fpreg2:FPRegArgs, 
msg_sym_nocase:, No-case
msg_sym_weak:, Weak
msg_sym_common:, size = 0x%.4lx
msg_sym_usessb:Sb, 
msg_sym_leaf:Leaf, 
msg_sym_absolute:Absolute, 
msg_sym_relative:Relative, 
msg_sym_strong:Strong, 
msg_sym_value:value 0x%.4lx
msg_sym_offset:offset 0x%.4lx in area \"%s\"
msg_base_addr:\
        Base address 0x%.6lx\n
msg_aifsym_absolute:Absolute
msg_aifsym_thumb:16-bit, 
msg_aifsym_text:Code
msg_aifsym_data:Data
msg_aifsym_zinit:Zero-Init
msg_string_offset:\
Offset  String-name\n\
-------------------\n
help_banner:\
\n%s Version %s [%s]\n       - %s\n\
\n%s [options] file [file...]\n
help_options1:\n\
Options:-\n\
-c   disassemble code\n\
-g   print debug areas\n\
-s   print symbol table\n
help_options2:\n\
ELF files only:-\n\
-t   print string table\n\
-d   display data section contents\n\
-r   display relocation information\n
help_examples:\n\
Examples:-\n\
     %s -gst my_elf.axf\n\
     %s -c test1.axf test2.axf test3.axf\n
msg_i_am:AXF Decoder
msg_i_do:decodes an ARM Executable Format (AXF) file
msg_unknown_type:*** ? type (%ld)
msg_typeno:type {%.6lx}
msg_linepos:%s at %ld
msg_linepos_char:%s at %ld,%ld
msg_section:Section: length %ld\n
msg_linker_debug:\
*** Low level (linker generated) debugging tables in AOF file\n
lang_c:    Language: C\n
lang_pascal:    Language: Pascal\n
lang_fortran:    Language: Fortran\n
lang_asm:    Language: Assembler\n
lang_unk:    Language: Unknown (%d)\n
msg_flag:    Flags: 
msg_flag_none:none
msg_flag_lines:line number info
msg_flag_vars:variable info
msg_flag_vars_more:, variable info
msg_flag_fpmap:fp map
msg_flag_fpmap_more:, fp map
msg_debug_version:    Debugging table version: %d\n
msg_code_addr:    Code: address
msg_data_addr:    Data: address
msg_size:, size = 0x%lx\n
msg_fileinfo_offset:    File info offset = 0x%.6lx\n
msg_section_size:    Section size = %ld\n
msg_section_name:    Section name: \"%.*s\"\n
msg_section_codeaddr:Code address
msg_itemlength0:*** Item length = 0\n
msg_misplaced_section:*** Misplaced section\n
msg_proc:Proc
msg_proc_name:: name %.*s:
msg_proc_args:: %ld arguments\n
msg_proc_start:    Start address
msg_proc_body:, body
msg_proc_end0:    Endproc = 0 => Label\n
msg_proc_end:    Endproc 0x%.6lx\n
msg_proc_file:    File 0x%.6lx\n
msg_endproc:Endproc
msg_endproc_limit:: limit
msg_endproc_file:    File 0x%.6lx\n
msg_endproc_returnpt:    return point %ld
msg_endproc_blankrpt:                 %ld
msg_endproc_blank:
msg_endproc_scopes_open:*** scopes still open at endproc\n
msg_var:Var
msg_var_name:: name %.*s: 
msg_var_at: at
msg_var_var:: Argument by reference (Pascal VAR argument) 
msg_var_fpoffset:FP offset %ld\n
msg_var_reg_odd:*** ? register %ld\n
msg_var_fcarg:: Fortran character argument
msg_var_farg:: Fortran argument
msg_var_fortran_offset: Argument list offset %ld\n
msg_var_odd:: *** ? storage class %ld: 
msg_var_odd1:Offset / address = 0x%.6lx\n
msg_var_extern:: extern
msg_var_static:: static
msg_var_auto:: auto
msg_var_register:: register 
msg_type:Type %.*s 
msg_type_union:Union
msg_type_struct:Struct
msg_type_class:Class
msg_type_data:%s: %ld fields, size 0x%lx\n
msg_type_data1:    field %ld offset 0x%lx: name %.*s: 
msg_enumd:EnumD: 
msg_enum_members: %ld members\n
msg_enum_member:    value 0x%lx: name %.*s\n
msg_enumc:EnumC: 
msg_array:Array: element size = %ld: 
msg_array_flags_odd: *** ? flags 0x%lx\n
msg_array_lbound_var:          %sVariable lower bound: var %ld\n
msg_array_lbound_fpoffset:          %sVariable lower bound: FP offset %ld\n
msg_array_ubound_var:          %sVariable upper bound: var %ld\n
msg_array_ubound_fpoffset:          %sVariable upper bound: FP offset %ld\n
msg_subr:Subrange\n
msg_subr_bytesize:Byte size = %ld
msg_subr_bytesize_odd:    *** Format error: Illegal byte size\n
msg_subr_type:    Type = 
msg_subr_lbound:    Lowerbound = %ld\n
msg_subr_ubound:    Upperbound = %ld\n
msg_set:Set: size %ld\n
msg_bitfield:Bitfield: 
msg_bitfield_container: container: 
msg_bitfield_offset: offset %ld size %ld\n
msg_scope_begin:Begin scope at
msg_scope_end:End scope at
msg_undef:File 0x%.6lx line %ld #undef %.*s\n
msg_define:File 0x%.6lx line %ld #define %.*s
msg_fileinfo:File Info: length %ld\n
msg_fileinfo_entry_len:Entry length = %ld
msg_fileinfo_entry_eof: => end of file info\n
msg_fileinfo_date:date 0x%.8lx 
msg_fileinfo_fragment:%ld fragments\n
msg_fileinfo_fragment_info:Fragment %ld (size %ld): lines %ld to %ld\n
msg_fileinfo_codeaddr:Code address
msg_fileinfo_size:, size 0x%lx\n
msg_fileinfo_lineinfo4:0x%.6lx line %ld/%1ld:%-2ld
msg_fileinfo_lineinfo3:0x%.6lx line %ld/%1ld   
msg_fileinfo_lineinfo2:0x%.6lx line %ld  :%-2ld
msg_fileinfo_lineinfo1:0x%.6lx line %ld     
msg_fpmap:fp map fragment: length %ld,
msg_fpmap_size: size 0x%lx
msg_fpmap_base: base
msg_fpmap_save: save
msg_fpmap_offset:0x%.6lx offset %ld
msg_debugobj_unk:*** ? debugging item %ld\n
dwarf_illegal_debugoff:*** Illegal offset into '.debug' section\n
dwarf_unexpected_form:*** Unexpected form for attribute\n
dwarf_bad_length:*** Block length differs from expected length\n
dwarf_dumping:*** Dumping remaining data in this tag\n
dwarf_overruns:*** Overruns\n
dwarf_zero_length_tag:*** TAG has length 0 (assuming 4)\n
dwarf_no_sibling:*** No sibling found (assuming this+length)\n
dwarf_back_sibling:*** Sibling (0x%lx) points before this element (assuming this+length)\n
dwarf_parent_sibling:*** Reached sibling of parent (missing null entry)\n
dwarf_truncated:*** Truncating to %ld bytes\n
dwarf_bad_line_length:*** Length-8 not a multiple of 10 bytes\n
dwarf_bad_line_end:*** List doesn't end with line 0\n
dwarf_bad_line_pcinc:*** PC deltas do not increase monotonically\n
dwarf_bad_version:*** Unknown version number - skipping\n
dwarf_bad_name:*** Name does not match TAG's AT_name attribute\n
dwarf_line_eol_nozero:*** End of list for compilation unit (should be a zero offset)\n
dwarf_bad_area:*** Unrecognised ELF debugging area \"%s\"\n
dwarf_unknown_version:*** Unknown version number - skipping\n
dwarf_bad_type:*** Bad type attribute\n
dwarf_subscr_ft:Index: Fundamental type: 
dwarf_subscr_ut:Index: User type ref: %ld\n
dwarf_subscr_lox:Lower bound:  %ld\n
dwarf_subscr_lol:Lower bound (loc): (%d bytes)\n
dwarf_subscr_lou:Lower bound: <unspecified>\n
dwarf_subscr_hix:Higher bound: %ld\n
dwarf_subscr_hil:Higher bound (loc): (%d bytes)\n
dwarf_subscr_hiu:Higher bound: <unspecified>\n
dwarf_subscr_bad:*** Last subscript-data elememt not type-specifier\n
dwarf_name:Name
dwarf_producer:Producer
dwarf_type:Type: 
dwarf_reference:reference to offset 0x%06lx\n
dwarf_ellipsis:...\n
dwarf_bytes:(%ld bytes)
dwarf_null_entry:null entry (%ld bytes)
dwarf_padding:%ld bytes of padding data\n
dwarf_offset:Offset 0x%lx (0x%lx)\n
dwarf_eol:End of list for compilation unit (zero offset)\n
dwarf_arange:0x%08x: %d bytes\n
dwarf_cu_at:Compilation unit at address %08lx (%ld bytes)\n
dwarf_cu_vsn:Compilation unit (%ld bytes) vsn %d:\n
dwarf_cu_size:%ld bytes generated for unit\n
dwarf_line_at:0x%08lx at line %ld
dwarf_warn_pc_inc:  (PC offset not greater than previous entry)
dwarf_unknown_tag:unknown tag (0x%x)
dwarf_unknown_op:unknown OP (%d)
dwarf_unknown_mod:unknown MOD (%d) 
dwarf_unknown_ft:unknown FT (%d)\n
dwarf_unknown_at:unknown AT (0x%x)
dwarf_unknown_form: (unknown FORM) (0x%x)\n
dwarf_unknown_ord:unknown ORD (%d)\n
dwarf_unknown_lang:unknown LANG (%d)\n
