


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       -------------
    3 00000000         ; Unsigned division macro
    4 00000000         ; From http://www.keil.com/support/man/docs/armasm/armas
                       m_CEGECDGD.htm
    5 00000000         ; $Bot The register that holds the divisor.
    6 00000000         ; $Top The register that holds the dividend before the i
                       nstructions are executed. After the instructions are exe
                       cuted, it holds the remainder.
    7 00000000         ; $Div The register where the quotient of the division i
                       s placed. It can be NULL ("") if only the remainder is r
                       equired.
    8 00000000         ; $Temp A temporary register used during the calculation
                       .
    9 00000000         ;
   10 00000000         ; Usage: 
   11 00000000         ; ratio  DivMod  R0,R5,R4,R2
   12 00000000         ;-------------------------------------------------------
                       -------------
   13 00000000                 MACRO
   14 00000000         $Lab    DivMod           $Div,$Top,$Bot,$Temp
   15 00000000                 ASSERT           $Top <> $Bot ; Produce an error
                                                             message if the
   16 00000000                 ASSERT           $Top <> $Temp ; registers suppl
                                                            ied are
   17 00000000                 ASSERT           $Bot <> $Temp 
                                                            ; not all different
                                                            
   18 00000000                 IF               "$Div" <> ""
   19 00000000                 ASSERT           $Div <> $Top ; These three only
                                                             matter if $Div
   20 00000000                 ASSERT           $Div <> $Bot ; is not null ("")
                                                            
   21 00000000                 ASSERT           $Div <> $Temp ;
   22 00000000                 ENDIF
   23 00000000         $Lab
   24 00000000                 MOV              $Temp, $Bot ; Put divisor in $T
                                                            emp
   25 00000000                 CMP              $Temp, $Top, LSR #1 
                                                            ; double it until
   26 00000000         90      MOVLS            $Temp, $Temp, LSL #1 
                                                            ; 2 * $Temp > $Top
   27 00000000                 CMP              $Temp, $Top, LSR #1
   28 00000000                 BLS              %b90        ; The b means searc
                                                            h backwards
   29 00000000                 IF               "$Div" <> "" ; Omit next instru
                                                            ction if $Div is nu
                                                            ll
   30 00000000                 MOV              $Div, #0    ; Initialize quotie
                                                            nt
   31 00000000                 ENDIF
   32 00000000         91      CMP              $Top, $Temp ; Can we subtract $
                                                            Temp?
   33 00000000                 SUBCS            $Top, $Top,$Temp 
                                                            ; If we can, do so
   34 00000000                 IF               "$Div" <> "" ; Omit next instru
                                                            ction if $Div is nu
                                                            ll



ARM Macro Assembler    Page 2 


   35 00000000                 ADC              $Div, $Div, $Div ; Double $Div
   36 00000000                 ENDIF
   37 00000000                 MOV              $Temp, $Temp, LSR #1 
                                                            ; Halve $Temp,
   38 00000000                 CMP              $Temp, $Bot ; and loop until
   39 00000000                 BHS              %b91        ; less than divisor
                                                            
   40 00000000                 MEND
   41 00000000         
   42 00000000         ; Default header for generated assembly
   43 00000000                 AREA             ProgramData, DATA, READWRITE, N
OINIT
   44 00000000         
   45 00000000 00000000 
                       SWI_WriteC
                               EQU              &0          ; output the charac
                                                            ter in r0 to the sc
                                                            reen
   46 00000000 00000002 
                       SWI_Write0
                               EQU              &2          ; Write a null (0) 
                                                            terminated buffer t
                                                            o the screen
   47 00000000 00000004 
                       SWI_ReadC
                               EQU              &4          ; input character i
                                                            nto r0
   48 00000000 00000011 
                       SWI_Exit
                               EQU              &11         ; finish program
   49 00000000         
   50 00000000         HeapPtr DCD              0           ;Heap pointer
   51 00000004         ; Rest of user's Data 
   52 00000004         GLOBAL_a
                               DCD              0
   53 00000008         GLOBAL_b
                               DCD              0
   54 0000000C         GLOBAL_c
                               DCD              0
   55 00000010         block_1_x
                               DCD              0
   56 00000014         
   57 00000014         HEAP    SPACE            1000
   58 000003FC                 ALIGN
   59 000003FC         STACK_TOP
                               SPACE            1000
   60 000007E4         STACK_BASE
   61 000007E4                 ALIGN
   62 000007E4         STACK_PADDING
                               SPACE            100         ;Just in case
   63 00000848                 ALIGN
   64 00000848         ;-------------------------------------------------------
                       -------------------------
   65 00000848         ; Program Code
   66 00000848         ;-------------------------------------------------------
                       -------------------------
   67 00000848                 AREA             RESET, CODE
   68 00000000                 ENTRY
   69 00000000 E59FD028        LDR              R13, =STACK_BASE-4 ; Set Stack 



ARM Macro Assembler    Page 3 


                                                            Pointer to Stack_Ba
                                                            se
   70 00000004 E59FC028        LDR              R12, =HEAP  ; Load start of Hea
                                                            p address
   71 00000008 E59FB028        LDR              R11, =HeapPtr ; //Load address 
                                                            of HeapPtr
   72 0000000C E58BC000        STR              R12, [R11]  ; Initialise HeapPt
                                                            r
   73 00000010         ; User Code
   74 00000010         ;   R1 is now GLOBAL_a
   75 00000010 E3A01001        MOV              R1, #1      ;Line 11
   76 00000014         ;   R0 is now forced to be GLOBAL_a
   77 00000014 E1A00001        MOV              R0, R1      ; force moving
   78 00000018         ;   R4 is now forced to be GLOBAL_b
   79 00000018 EBFFFFFE        BL               func_incr
   80 0000001C E59FC018        LDR              R12, =GLOBAL_a ; Force storage 
                                                            of variable
   81 00000020 E58C0000        STR              R0, [R12]
   82 00000024 E1A00004        MOV              R0, R4      ; Moving register t
                                                            emporarily
   83 00000028 EBFFFFFE        BL               PRINTR0_    ;Print integer
   84 0000002C EF000011        SWI              SWI_Exit
   85 00000030         ;-------------------------------------------------------
                       -------------------------
   86 00000030         ; Function and Procedures
   87 00000030         ;-------------------------------------------------------
                       -------------------------
   88 00000030 FFFFFFFC 
              00000000 
              00000000 
              00000000         AREA             Functions, CODE
   89 00000000         ;"Library functions"
   90 00000000         
   91 00000000         ;-------------------------------------------------------
                       -------------------------
   92 00000000         ; Subroutine to print contents of register 0 in decimal
   93 00000000         ; By Dr. Tom Clarke
   94 00000000         ;-------------------------------------------------------
                       -------------------------
   95 00000000         ; ** REGISTER DESCRIPTION ** 
   96 00000000         ; R0 byte to print, carry count
   97 00000000         ; R1 number to print
   98 00000000         ; R2 ... ,thousands, hundreds, tens, units.
   99 00000000         ; R3 addresses of constants, automatically incremented
  100 00000000         ; R4 holds the address of units
  101 00000000         ; Allocate 10^9, 10^8, ... 1000, 100, 10, 1
  102 00000000         
  103 00000000 3B9ACA00 
                       CMP1_   DCD              1000000000
  104 00000004 05F5E100 
                       CMP2_   DCD              100000000
  105 00000008 00989680 
                       CMP3_   DCD              10000000
  106 0000000C 000F4240 
                       CMP4_   DCD              1000000
  107 00000010 000186A0 
                       CMP5_   DCD              100000
  108 00000014 00002710 
                       CMP6_   DCD              10000



ARM Macro Assembler    Page 4 


  109 00000018 000003E8 
                       CMP7_   DCD              1000
  110 0000001C 00000064 
                       CMP8_   DCD              100
  111 00000020 0000000A 
                       CMP9_   DCD              10
  112 00000024 00000001 
                       CMP10_  DCD              1
  113 00000028         ; Entry point
  114 00000028         
  115 00000028 E82D401F 
                       PRINTR0_
                               STMED            R13!,{r0-r4,r14}
  116 0000002C E3500000        CMP              R0, #0x0
  117 00000030 03A00030        MOVEQ            R0, #0x30
  118 00000034 0F000000        SWIEQ            SWI_WriteC
  119 00000038 0A000014        BEQ              PrintNewL
  120 0000003C E1A01000        MOV              R1, R0
  121 00000040         ; Is R1 negative?
  122 00000040 E3510000        CMP              R1,#0
  123 00000044 5A000002        BPL              LDCONST_
  124 00000048 E2611000        RSB              R1, R1, #0  ;Get 0-R1, ie posit
                                                            ive version of r1
  125 0000004C E3A0002D        MOV              R0, #'-'
  126 00000050 EF000000        SWI              SWI_WriteC
  127 00000054         
  128 00000054 E24F305C 
                       LDCONST_
                               ADR              R3, CMP1_   ;Used for compariso
                                                            n at the end of pri
                                                            nting
  129 00000058         
  130 00000058 E2834028        ADD              R4, R3, #40 ;Determine final ad
                                                            dress (10 word addr
                                                            esses +4 because of
                                                             post-indexing)
  131 0000005C         ; Take as many right-0's as you can...
  132 0000005C         
  133 0000005C E4932004 
                       NEXT0_  LDR              R2, [R3], #4
  134 00000060 E1520001        CMP              R2, R1
  135 00000064 8AFFFFFC        BHI              NEXT0_
  136 00000068         ;Print all significant characters
  137 00000068         
  138 00000068 E3A00000 
                       NXTCHAR_
                               MOV              R0, #0
  139 0000006C E1510002 
                       SUBTRACT_
                               CMP              R1, R2
  140 00000070 50411002        SUBPL            R1, R1, R2
  141 00000074 52800001        ADDPL            R0,R0, #1
  142 00000078 5AFFFFFB        BPL              SUBTRACT_
  143 0000007C         
  144 0000007C         ;Output number of Carries
  145 0000007C E2800030        ADD              R0, R0, #'0'
  146 00000080 EF000000        SWI              SWI_WriteC
  147 00000084         ; Get next constant, ie divide R2/10 
  148 00000084         



ARM Macro Assembler    Page 5 


  149 00000084 E4932004        LDR              R2, [R3], #4
  150 00000088         
  151 00000088         ;If we have gone past L10, exit function; else take next
                        character 
  152 00000088 E1530004        CMP              R3, R4      ;
  153 0000008C         
  154 0000008C DAFFFFF5        BLE              NXTCHAR_    ;
  155 00000090         ; Print a line break
  156 00000090 E3A0000A 
                       PrintNewL
                               MOV              R0, #'\n'
  157 00000094 EF000000        SWI              SWI_WriteC
  158 00000098 E9BD801F        LDMED            R13!,{r0-r4,r15} ;Return
  159 0000009C         
  160 0000009C         ;-------------------------------------------------------
                       ------------
  161 0000009C         ; New Procedure 
  162 0000009C         ; R0 - Pointer to initialise - Only supports one word po
                       inters
  163 0000009C         ; NOTE: Does not reuse disposed addresses. Simple alloca
                       tor
  164 0000009C         ;-------------------------------------------------------
                       ------------
  165 0000009C         
  166 0000009C E82D4006 
                       NEW     STMED            R13!, {R1,R2,R14}
  167 000000A0 E59F2020        LDR              R2, =HeapPtr ; Address of heap 
                                                            pointer
  168 000000A4 E4921004        LDR              R1, [R2], #4 ; Load value of he
                                                            ap pointer and incr
                                                            ement
  169 000000A8 E1A00001        MOV              R0, R1      ; Give new address 
                                                            to R0
  170 000000AC E5821000        STR              R1, [R2]    ; Save heap pointer
                                                            
  171 000000B0 E9BD8006        LDMED            R13!, {R1,R2,R15} ; Return
  172 000000B4         
  173 000000B4         ;-------------------------------------------------------
                       ------------
  174 000000B4         ; Dispose Procedure 
  175 000000B4         ; R0 - Pointer to dispose - Only supports one word point
                       ers
  176 000000B4         ; NOTE: Does not reuse disposed addresses. Simple deallo
                       cator
  177 000000B4         ;-------------------------------------------------------
                       ------------
  178 000000B4         
  179 000000B4 E3A00000 
                       DISPOSE MOV              R0, #0      ; Simply resets the
                                                             pointer
  180 000000B8 E1A0F00E        MOV              R15, R14    ; Return
  181 000000BC         
  182 000000BC         ;-------------------------------------------------------
                       ------------
  183 000000BC         ; User functions and procedures
  184 000000BC         ;-------------------------------------------------------
                       ------------
  185 000000BC         ; ------------------------------------------------------
                       



ARM Macro Assembler    Page 6 


  186 000000BC         ; func_incr
  187 000000BC         ; R0 - x: integer
  188 000000BC         ; R4 - Return Value : integer
  189 000000BC         ; ------------------------------------------------------
                       
  190 000000BC E82D4000 
                       func_incr
                               STMED            R13!, {R14} ; save to stack
  191 000000C0 E2804001        ADD              R4, R0, #1  ;Line 7
  192 000000C4 E9BD8000        LDMED            R13!, {R15} ; return
  193 000000C8         
  194 000000C8                 END
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=test.d -otest.o -ID:\Kei
l\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --list=t
est.lst test.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

GLOBAL_a 00000004

Symbol: GLOBAL_a
   Definitions
      At line 52 in file test.s
   Uses
      At line 80 in file test.s
Comment: GLOBAL_a used once
GLOBAL_b 00000008

Symbol: GLOBAL_b
   Definitions
      At line 53 in file test.s
   Uses
      None
Comment: GLOBAL_b unused
GLOBAL_c 0000000C

Symbol: GLOBAL_c
   Definitions
      At line 54 in file test.s
   Uses
      None
Comment: GLOBAL_c unused
HEAP 00000014

Symbol: HEAP
   Definitions
      At line 57 in file test.s
   Uses
      At line 70 in file test.s
Comment: HEAP used once
HeapPtr 00000000

Symbol: HeapPtr
   Definitions
      At line 50 in file test.s
   Uses
      At line 71 in file test.s
      At line 167 in file test.s

ProgramData 00000000

Symbol: ProgramData
   Definitions
      At line 43 in file test.s
   Uses
      None
Comment: ProgramData unused
STACK_BASE 000007E4

Symbol: STACK_BASE
   Definitions
      At line 60 in file test.s
   Uses
      At line 69 in file test.s
Comment: STACK_BASE used once
STACK_PADDING 000007E4




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: STACK_PADDING
   Definitions
      At line 62 in file test.s
   Uses
      None
Comment: STACK_PADDING unused
STACK_TOP 000003FC

Symbol: STACK_TOP
   Definitions
      At line 59 in file test.s
   Uses
      None
Comment: STACK_TOP unused
block_1_x 00000010

Symbol: block_1_x
   Definitions
      At line 55 in file test.s
   Uses
      None
Comment: block_1_x unused
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 67 in file test.s
   Uses
      None
Comment: RESET unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CMP10_ 00000024

Symbol: CMP10_
   Definitions
      At line 112 in file test.s
   Uses
      None
Comment: CMP10_ unused
CMP1_ 00000000

Symbol: CMP1_
   Definitions
      At line 103 in file test.s
   Uses
      At line 128 in file test.s
Comment: CMP1_ used once
CMP2_ 00000004

Symbol: CMP2_
   Definitions
      At line 104 in file test.s
   Uses
      None
Comment: CMP2_ unused
CMP3_ 00000008

Symbol: CMP3_
   Definitions
      At line 105 in file test.s
   Uses
      None
Comment: CMP3_ unused
CMP4_ 0000000C

Symbol: CMP4_
   Definitions
      At line 106 in file test.s
   Uses
      None
Comment: CMP4_ unused
CMP5_ 00000010

Symbol: CMP5_
   Definitions
      At line 107 in file test.s
   Uses
      None
Comment: CMP5_ unused
CMP6_ 00000014

Symbol: CMP6_
   Definitions
      At line 108 in file test.s
   Uses
      None
Comment: CMP6_ unused
CMP7_ 00000018

Symbol: CMP7_



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 109 in file test.s
   Uses
      None
Comment: CMP7_ unused
CMP8_ 0000001C

Symbol: CMP8_
   Definitions
      At line 110 in file test.s
   Uses
      None
Comment: CMP8_ unused
CMP9_ 00000020

Symbol: CMP9_
   Definitions
      At line 111 in file test.s
   Uses
      None
Comment: CMP9_ unused
DISPOSE 000000B4

Symbol: DISPOSE
   Definitions
      At line 179 in file test.s
   Uses
      None
Comment: DISPOSE unused
Functions 00000000

Symbol: Functions
   Definitions
      At line 88 in file test.s
   Uses
      None
Comment: Functions unused
LDCONST_ 00000054

Symbol: LDCONST_
   Definitions
      At line 128 in file test.s
   Uses
      At line 123 in file test.s
Comment: LDCONST_ used once
NEW 0000009C

Symbol: NEW
   Definitions
      At line 166 in file test.s
   Uses
      None
Comment: NEW unused
NEXT0_ 0000005C

Symbol: NEXT0_
   Definitions
      At line 133 in file test.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 135 in file test.s
Comment: NEXT0_ used once
NXTCHAR_ 00000068

Symbol: NXTCHAR_
   Definitions
      At line 138 in file test.s
   Uses
      At line 154 in file test.s
Comment: NXTCHAR_ used once
PRINTR0_ 00000028

Symbol: PRINTR0_
   Definitions
      At line 115 in file test.s
   Uses
      At line 83 in file test.s
Comment: PRINTR0_ used once
PrintNewL 00000090

Symbol: PrintNewL
   Definitions
      At line 156 in file test.s
   Uses
      At line 119 in file test.s
Comment: PrintNewL used once
SUBTRACT_ 0000006C

Symbol: SUBTRACT_
   Definitions
      At line 139 in file test.s
   Uses
      At line 142 in file test.s
Comment: SUBTRACT_ used once
func_incr 000000BC

Symbol: func_incr
   Definitions
      At line 190 in file test.s
   Uses
      At line 79 in file test.s
Comment: func_incr used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

SWI_Exit 00000011

Symbol: SWI_Exit
   Definitions
      At line 48 in file test.s
   Uses
      At line 84 in file test.s
Comment: SWI_Exit used once
SWI_ReadC 00000004

Symbol: SWI_ReadC
   Definitions
      At line 47 in file test.s
   Uses
      None
Comment: SWI_ReadC unused
SWI_Write0 00000002

Symbol: SWI_Write0
   Definitions
      At line 46 in file test.s
   Uses
      None
Comment: SWI_Write0 unused
SWI_WriteC 00000000

Symbol: SWI_WriteC
   Definitions
      At line 45 in file test.s
   Uses
      At line 118 in file test.s
      At line 126 in file test.s
      At line 146 in file test.s
      At line 157 in file test.s

4 symbols
370 symbols in table
